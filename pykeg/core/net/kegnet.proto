message Ping {
}

message QuitEvent {
}

message StartCompleteEvent {
}

message MeterUpdate {
  required string tap_name = 1;
  required float reading = 2;
}

// FlowUpdate describes a change in state
message FlowUpdate {
  // All possible states for a Flow.
  enum FlowState {
    INITIAL = 1;
    ACTIVE = 2;
    IDLE = 3;
    CLOSE_WAIT = 4;
    COMPLETED = 5;
  }

  // A unique id that can be used to track this flow. For a given tap_name,
  // there must only ever be one flow active (ie, in any state other than
  // COMPLETED)
  required uint32 flow_id = 1;

  // The name of the tap.
  required string tap_name = 2;

  // The current state of the flow.
  required FlowState state = 3;

  // If present, gives the username that has been associated with this flow.
  optional string username = 4;

  // Time, as unix timestamp in seconds, when the flow was started.
  required uint32 start_time = 5;

  // Time, as unix timestamp in seconds, when a change in volume was last
  // registered.
  required uint32 last_activity_time = 6;

  // Total ticks recorded, in device-specific units.
  required uint32 ticks = 7;

  // Total volume recorded, in milliliters.
  required float volume_ml = 8;
}

message TapIdleEvent {
  required string tap_name = 1;
}

message DrinkCreatedEvent {
  // The flow id for the flow which created this drink.
  required uint32 flow_id = 1;

  // The id of the newly-recorded drink.
  required uint32 drink_id = 2;

  // The tap name of the flow/drink. (Also implicit in flow_id.)
  required string tap_name = 3;

  // Time, as unix timestamp in seconds, when the flow was started.
  required uint32 start_time = 4;

  // Time, as unix timestamp in seconds, when the flow was ended.
  required uint32 end_time = 5;

  // If present, gives the username that has been associated with this flow.
  // This may be set to the anonymous user.
  optional string username = 6;

}

message TokenAuthEvent {
  enum TokenState {
    ADDED = 1;
    REMOVED = 2;
  }
  // Tap on which the event occurred.
  required string tap_name = 1;

  // Name of the authentication device reporting the event.
  required string auth_device_name = 2;

  // Value of the token.
  required string token_value = 3;

  // Event kind.
  required TokenState status = 4;
}

message UserAuthEvent {
  enum UserState {
    ADDED = 1;
    REMOVED = 2;
  }
  // Tap on which the event occurred.
  required string tap_name = 1;

  // User name.
  required string user_name = 2;

  required UserState state = 3;
}

message ThermoEvent {
  // Name of the sensor.
  required string sensor_name = 1;

  // Value at the sensor.
  required float sensor_value = 2;
}

message FlowRequest {
  enum Action {
    START_FLOW = 1;
    STOP_FLOW = 2;
    REPORT_STATUS = 3;
  }
  // Name of tap.
  required string tap_name = 1;

  // Requested action.
  required Action request = 2;
}

message HeartbeatSecondEvent {
}

message HeartbeatMinuteEvent {
}

message HeartbeatHourEvent {
}

message CreditAddedEvent {
  required float amount = 1;
  optional string username = 2;
}
